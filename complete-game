## FUNCTIONS ##

# Step 1. Create a board with board indexes.

from IPython.display import clear_output

def display_board(board):
    # clear output everytime display_board is called
    clear_output()
    print(board[1]+' | '+board[2]+' | '+board[3])
    print('--------')
    print(board[4]+' | '+board[5]+' | '+board[6])
    print('--------')
    print(board[7]+' | '+board[8]+' | '+board[9])
    
# Step 2. Assign marker to player 1 and player 2 (opposite of player 1's input).

def player_input():
    
    # marker as an empty string
    marker = ''
    
    # if player1 does not choose X or O, request again in a while loop until chosen
    while marker != 'X' and marker != 'O':
        marker = input("Player 1, please choose 'X' or 'O'.")
        # assign player2 as the opposite of player1's marker (note use of == vs =)
        if marker == 'X':
            return ('X','O')
        else:
            return ('O','X')
            
# Step 3. Write a function that takes in the board list object, a marker ('X' or 'O'), and 
# a desired position (number 1-9) and assigns it to the board

def place_marker(board, marker, position):
    
    # note that marker = board[position] does not work!
    board[position] = marker
    
# Step 4. Write a function that takes in a board and a mark (X or O)
# and then checks to see if that mark has won

def win_check(board, marker):
    return ((marker == board[1] == board[2] == board[3]) or # top row
            (marker == board[4] == board[5] == board[6]) or # mid row
            (marker == board[7] == board[8] == board[9]) or # bottom row
            (marker == board[1] == board[4] == board[7]) or # diag 1
            (marker == board[2] == board[5] == board[8]) or # diag 2
            (marker == board[3] == board[6] == board[9]) or # col 1
            (marker == board[1] == board[5] == board[9]) or # col 2
            (marker == board[3] == board[5] == board[7]))   # col 3
        
# Step 5. Write a function that uses the random module to randomly decide which player
# goes first. Return a string of which player went first
# 'import random' as a module for random coin flip

import random

def choose_first():
    if random.randint(0, 1) % 2 == 0:
        return 'Player 1 goes first!'
    else:
        return 'Player 2 goes first!'
        
# Step 6. Write a function that returns a boolean indicating whether a space on the board is freely available

def space_check(board,position):
    
    if board[position] == '':
        return True
    else:
        return False
        
# Step 7. Write a function that checks if the board is full and returns a boolean value.
# True if full, False otherwise.

def full_board_check(board):
    
    for i in range(1,10):
        if board[i] == 'X' or board[i] == 'O':
            return True
        else:
            return False
            
# Step 8: Write a function that asks for a player's next position (as a number 1-9)
# and then uses the function from step 6 to check if it's a free position.
# If it is, then return the position for later use

def player_choice(board):
    
    position = 0
    
    while position not in [1,2,3,4,5,6,7,8,9] or not space_check(board,position):
        position = int(input("Please input the corresponding integer (1-9) for your next move."))

    return position
    
# Step 9: Write a function that asks the player if they want to play again
# and returns a boolean True if they do want to play again.

def replay():
    
    request = ''
    
    while request != 'Yes' or request != 'yes' or request != 'No' or request != 'no':
        request = input("Would you like to play again? 'Yes' or 'No'")
        
        if request == 'Yes' or request == 'yes':
            return True
        if request == 'No' or request == 'no':
            return False

## GAME ##            


# Print a welcome comment (will not be looped)
print('Wecome to Tic Tac Toe')
print('Number to position assignment is as follows:')
print('Row 1: 1,2,3')
print('Row 2: 4,5,6')
print('Row 3: 7,8,9')

# Use a while loop to request for replays
while True:

    ## SETUP ## (the_board, choosing first player, and markers (X or O))
    the_board = ['']*10
    player1,player2 = player_input()

    turn = choose_first()

    play_game = input('Ready to play? Yes or No?')

    if play_game == 'Yes':
        game_on = True
    else:
        game_on = False

    ## GAMEPLAY ##
    while game_on:

        ## PLAYER 1 ##

        # During player 1's turn:
        if turn == 'Player 1':

            # Show the board
            display_board(the_board)

            # Choose a position
            position = player_choice(the_board)

            # Place the marker on the position
            place_marker(the_board,player1,position)

            # Check if player 1 has won and then check if there is a tie
            if win_check(the_board,player1):
                display_board(the_board)
                print('Congratulations Player 1! You are the winner.')
                game_on = False
            else:
                if full_board_check(the_board):
                    display_board(the_board)
                    print('Tie game!')
                    game_on = False

                # Return to player 1's turn if no win/tie
                else:
                    turn = 'Player 2'

        ## PLAYER 2 ##      

        # During player 2's turn (if player 1 has not won or game is not tied):
        else:

            # Show the board
            display_board(the_board)

            # Choose a position
            position = player_choice(the_board)

            # Place the marker on the position
            place_marker(the_board,player2,position)

            # Check if player 2 has won and then check if there is a tie
            if win_check(the_board,player2):
                display_board(the_board)
                print('Congratulations Player 2! You are the winner.')
                game_on = False
            else:
                if full_board_check(the_board):
                    display_board(the_board)
                    print('Tie game!')
                    game_on = False

                # Return to player 1's turn if no win/tie
                else:
                    turn = 'Player 1'

    # If no replay requested, break the loop and end game.
    if not replay():
        break
